CREATE DATABASE lms3;

USE lms3;

-- Create tables without foreign key constraints
CREATE TABLE Book (
  ISBN INT PRIMARY KEY,
  Title VARCHAR(100) NOT NULL,
  DateofPrint Date,
  member_id INT,
  amount INT,
  publisher_id INT,
  Genre_id INT
);

CREATE TABLE Publisher (
  SSN INT PRIMARY KEY,
  NAME VARCHAR(100) NOT NULL,
  Nationality VARCHAR(100)
);

CREATE TABLE Librarian (
  Staff_ID INT PRIMARY KEY,
  NAME VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL,
  Email_address VARCHAR(100) NOT NULL
);

CREATE TABLE Author (
  SSN INT PRIMARY KEY,
  Name VARCHAR(100) NOT NULL,
  Nationality VARCHAR(100),
  Biography TEXT
);

CREATE TABLE Report (
  Report_No INT PRIMARY KEY,
  issue INT,
  Staff_id INT
);

CREATE TABLE Genre (
  Genre_ID INT PRIMARY KEY,
  Number_of_books INT,
  NAME VARCHAR(100) NOT NULL
);

CREATE TABLE Event (
  Event_Id INT PRIMARY KEY,
  Title VARCHAR(100) NOT NULL,
  Event_date DATE
);

CREATE TABLE Member (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    password VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    Name VARCHAR(100) NOT NULL, 
    Gender CHAR(1) NOT NULL,
    Street_name VARCHAR(100),
    Building_number VARCHAR(50),
    City VARCHAR(100)
);

CREATE TABLE Member_phone (
  phone_number VARCHAR(15) NOT NULL, 
  member_id INT,
  PRIMARY KEY (phone_number, member_id)
);

CREATE TABLE Publisher_phone (
  phone_number VARCHAR(15) NOT NULL, 
  PublisherId INT,
  PRIMARY KEY (phone_number, PublisherId)
);

CREATE TABLE Librarian_phone (
  phone_number VARCHAR(15) NOT NULL,
  LibrarianID INT,
  PRIMARY KEY (phone_number, LibrarianID)
);

CREATE TABLE Authors_Book (
  ISBN INT,
  author_id INT,
  PRIMARY KEY (ISBN, author_id)
);

CREATE TABLE Attended_Event (
  member_id INT,
  event_id INT,
  PRIMARY KEY (member_id, event_id)
);

CREATE TABLE Borrowing_Member (
  ISBN INT,
  member_id INT,
  return_date DATE,
  borrow_date DATE,
  PRIMARY KEY (ISBN, member_id)
);

-- Add foreign key constraints
ALTER TABLE Book ADD FOREIGN KEY (publisher_id) REFERENCES Publisher(SSN);
ALTER TABLE Book ADD FOREIGN KEY (Genre_id) REFERENCES Genre(Genre_ID);
ALTER TABLE Report ADD FOREIGN KEY (Staff_id) REFERENCES Librarian(Staff_ID);
ALTER TABLE Member_phone ADD FOREIGN KEY (member_id) REFERENCES Member(Id);
ALTER TABLE Publisher_phone ADD FOREIGN KEY (PublisherId) REFERENCES Publisher(SSN);
ALTER TABLE Librarian_phone ADD FOREIGN KEY (LibrarianID) REFERENCES Librarian(Staff_ID);
ALTER TABLE Authors_Book ADD FOREIGN KEY (ISBN) REFERENCES Book(ISBN);
ALTER TABLE Authors_Book ADD FOREIGN KEY (author_id) REFERENCES Author(SSN);
ALTER TABLE Attended_Event ADD FOREIGN KEY (member_id) REFERENCES Member(Id);
ALTER TABLE Attended_Event ADD FOREIGN KEY (event_id) REFERENCES Event(Event_Id);
ALTER TABLE Borrowing_Member ADD FOREIGN KEY (ISBN) REFERENCES Book(ISBN);
ALTER TABLE Borrowing_Member ADD FOREIGN KEY (member_id) REFERENCES Member(Id);



CREATE FUNCTION LibrarianSignInFunction (@Staff_ID INT, @Password NVARCHAR(100))
RETURNS TABLE
AS
RETURN
(
   SELECT 'Librarian' AS Role, Staff_ID, NAME, Email_address, NULL AS Gender, NULL AS Street_name, NULL AS Building_number, NULL AS City
   FROM Librarian 
   WHERE Staff_ID = @Staff_ID AND password = @Password
   UNION ALL
   SELECT 'Member' AS Role, Id AS Staff_ID, Name, email, Gender, Street_name, Building_number, City
   FROM Member 
   WHERE Id = @Staff_ID AND password = @Password
); 





----------------------------------------------------------------
-------------------------- FUNCTION Kareem


use lms3;
go
CREATE PROCEDURE SearchBooks
    @SearchTerm NVARCHAR(100),
    @Genre NVARCHAR(100),
    @Publisher NVARCHAR(100),
    @SortOption NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Query NVARCHAR(MAX)

    SET @Query = 'SELECT b.ISBN, b.Title, b.Amount 
                  FROM Book b'

    IF @Genre <> '' AND @Genre IS NOT NULL AND @Genre <> 'None'
    BEGIN
        SET @Query = @Query + ' INNER JOIN Genre g ON b.Genre_id = g.Genre_ID'
    END

    IF @Publisher <> '' AND @Publisher IS NOT NULL AND @Publisher <> 'None'
    BEGIN
        SET @Query = @Query + ' INNER JOIN Publisher p ON b.publisher_id = p.SSN'
    END

    SET @Query = @Query + ' WHERE 1 = 1' -- Placeholder condition to append additional conditions

    IF @SearchTerm <> '' AND @SearchTerm IS NOT NULL
    BEGIN
        SET @Query = @Query + ' AND b.Title LIKE ''%' + @SearchTerm + '%'''
    END

    IF @Genre <> '' AND @Genre IS NOT NULL AND @Genre <> 'None'
    BEGIN
        SET @Query = @Query + ' AND g.NAME LIKE ''%' + @Genre + '%'''
    END

    IF @Publisher <> '' AND @Publisher IS NOT NULL AND @Publisher <> 'None'
    BEGIN
        SET @Query = @Query + ' AND p.NAME LIKE ''%' + @Publisher + '%'''
    END

    IF @SortOption = 'Ascending'
    BEGIN
        SET @Query = @Query + ' ORDER BY b.Amount ASC'
    END
    ELSE IF @SortOption = 'Descending'
    BEGIN
        SET @Query = @Query + ' ORDER BY b.Amount DESC'
    END

    EXEC sp_executesql @Query
END

---------------------------------------------------------------------------
CREATE PROCEDURE DeleteBook
    @BookID INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Query NVARCHAR(MAX)

    -- Build the SQL query to delete the book with the specified ISBN
    SET @Query = 'DELETE FROM Book WHERE ISBN = @BookID'

    -- Execute the SQL query
    EXEC sp_executesql @Query, N'@BookID INT', @BookID
END
---------------------------------------------------------------------------------

========================Functio Youssef 
Alter PROCEDURE registeruser (
    @password NVARCHAR(100),
    @email NVARCHAR(100),
    @name NVARCHAR(100),
    @gender CHAR(1),
    @street_name NVARCHAR(100),
    @building_number NVARCHAR(50),
    @city NVARCHAR(100)
)
AS
BEGIN
    BEGIN TRY
        -- Insert data into Member table
        INSERT INTO Member (password, email, Name, Gender, Street_name, Building_number, City)
        VALUES (@password, @email,
                @name, @gender, @street_name, @building_number, @city);

        -- No need to set any result message since we're not using an output parameter
    END TRY
    BEGIN CATCH
        -- You can handle errors here if needed
        -- For simplicity, let's just print the error message
        PRINT 'User registration failed. Error: ' + ERROR_MESSAGE();
    END CATCH
END;

=============================================================
CREATE PROCEDURE Borrow_Book
    @ISBN INT,
    @member_id INT,
    @return_date DATE = NULL
AS
BEGIN
    -- Check if the book is available for borrowing
    IF EXISTS (SELECT 1 FROM Book WHERE ISBN = @ISBN AND amount > 0)
    BEGIN
        -- Decrement the quantity of the book
        UPDATE Book SET amount = amount - 1 WHERE ISBN = @ISBN;

        -- Insert the borrowing record
        INSERT INTO Borrowing_Member (ISBN, member_id, return_date, borrow_date)
        VALUES (@ISBN, @member_id, @return_date, GETDATE());

        PRINT 'Book borrowed successfully.';
    END
    ELSE
    BEGIN
        RAISERROR ('Book is not available for borrowing.', 16, 1);
    END
END;







CREATE PROCEDURE GetUserBorrowHistory
    @UserId INT
AS
BEGIN
    SELECT Book.ISBN AS [Book ID], Book.Title, Borrowing_Member.borrow_date AS [Borrow Date], Borrowing_Member.return_date AS [Return Date]
    FROM Borrowing_Member
    INNER JOIN Book ON Borrowing_Member.ISBN = Book.ISBN
    WHERE Borrowing_Member.member_id = @UserId;
END;